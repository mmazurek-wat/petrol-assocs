# +WJXBFS4
# +WJXBFS5
#+WJXBFS6   indeksy obecnych obrotow sklepu - data leakage
#+WJXBFS7   indeksy obecnych obrotow sklepu - data leakage
+ STACJA_Stacja_calodobowa
+ STACJA_Parking_dla_TIROw
+ STACJA_Myjnia_reczna
+ STACJA_Powierzchnia_stacji
+ STACJA_Liczba_etatow
, df)
)
# Apply coef to each model and return a data frame
ldply(models, coef)
l_ply(models, summary, .print = TRUE)
l_ply(models, predict(models, data.frame(wszystkie_stacje)))
mapply('predict', models, wszystkie_stacje)
lapply('predict', models, wszystkie_stacje)
lapply(models, predict, wszystkie_stacje)
predictions<-lapply(models, predict, wszystkie_stacje)
total
total<-lapply(predictions, sum )
total
total<-colMeans(do.call(rbind, predictions), na.rm = TRUE)
total
sum(total)
total<-colSums(do.call(rbind, predictions), na.rm = TRUE)
sum(total)
total<-colSums(do.call(rbind, predictions[predictions>0]), na.rm = TRUE)
dc<-do.call(rbind, predictions)
dc
View(dc)
dc[dc<0]<-0
total<-colSums(dc, na.rm = TRUE)
sum(total)
models <- dlply(data.frame(sprzedaz_prod), "GRUPA_MATERIALOW_L3_OPIS", function(df)
rpart( SPRZEDAZ_PROD~STACJA_Typ_stacji
+STACJA_Powierzchnia_sklepu
+STACJA_Typ_miejscowosci
+STACJA_Brand
#+RODZAJ_PROBY
#+STACJA_Punkty_gastronomiczne
+STACJA_Myjnia_automatyczna
# +GfK_TYP_STACJI_KOD
+ STACJA_Karta_RED
+ STACJA_Karta_WOG
# +WJXBFSa
# +WJXBFS1
# +WJXBFS2
# +WJXBFS3
# +WJXBFS4
# +WJXBFS5
#+WJXBFS6   indeksy obecnych obrotow sklepu - data leakage
#+WJXBFS7   indeksy obecnych obrotow sklepu - data leakage
+ STACJA_Stacja_calodobowa
+ STACJA_Parking_dla_TIROw
+ STACJA_Myjnia_reczna
+ STACJA_Powierzchnia_stacji
+ STACJA_Liczba_etatow
, df)
)
predictions<-lapply(models, predict, wszystkie_stacje)
dc<-do.call(rbind, predictions)
dc[dc<0]<-0
total<-colSums(dc, na.rm = TRUE)
sum(total)
prediction<-cbind(wszystkie_stacje[,LU_STACJA_ID],total )
sqlSave(dwh, tablename="REP_SPRZEDAZ_STACJI_SCORE", dat=data.frame(prediction),  append = FALSE)
sqlSave(dwh, tablename="REP_SPRZEDAZ_STACJI_SCORE", dat=data.frame(prediction),  drop=TRUE, append = FALSE)
sqlSave(dwh, tablename="REP_SPRZEDAZ_STACJI_SCORE", dat=data.frame(prediction),  replace=TRUE, append = FALSE)
sqlDrop(dwh, "REP_SPRZEDAZ_STACJI_SCORE")
sqlSave(dwh, tablename="REP_SPRZEDAZ_STACJI_SCORE", dat=data.frame(prediction),  append = FALSE)
lpredictions<-lapply(models, predict, wszystkie_stacje)
dc<-do.call(rbind, lpredictions)
dc[dc<0]<-0
pred<-colSums(dc, na.rm = TRUE)
sum(pred)
prediction<-cbind(wszystkie_stacje[,LU_STACJA_ID],pred )
sqlDrop(dwh, "REP_SPRZEDAZ_STACJI_SCORE")
sqlSave(dwh, tablename="REP_SPRZEDAZ_STACJI_SCORE", dat=data.frame(prediction),  append = FALSE)
library(MicrostrategyR)
library(MicrostrategyR)
library(MicroStrategyR)
deployR()
plot(x)
x<-sample(1:100, 10)
plot(x)
x<-sample(1:100, 10)
p<-plot(x)
print (p)
knit(Asocjacje_2012.Rmd, output ="Asocjacje_knit.html", tangle = FALSE, text = NULL, quiet = FALSE,
envir = parent.frame(), encoding = getOption("encoding"))
library(knit)
knit(Asocjacje_2012.Rmd, output ="Asocjacje_knit.html", tangle = FALSE, text = NULL, quiet = FALSE,
envir = parent.frame(), encoding = getOption("encoding"))
library(knitR)
knit(Asocjacje_2012.Rmd, output ="Asocjacje_knit.html", tangle = FALSE, text = NULL, quiet = FALSE,
envir = parent.frame(), encoding = getOption("encoding"))
library(knitr)
knit(Asocjacje_2012.Rmd, output ="Asocjacje_knit.html", tangle = FALSE, text = NULL, quiet = FALSE,
envir = parent.frame(), encoding = getOption("encoding"))
library(knitr)
knit('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = FALSE, text = NULL, quiet = FALSE,
envir = parent.frame(), encoding = getOption("encoding"))
library(knitr)
knit('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = TRUE, text = NULL, quiet = FALSE,
envir = new.env(), encoding = getOption("encoding"))
library(knitr)
knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = FALSE text = NULL, quiet = FALSE,
envir = new.env(), encoding = getOption("encoding"))
library(knitr)
knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = FALSE text = NULL, quiet = FALSE,
envir = new.env(), encoding = getOption("encoding"))
library(knitr)
knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = FALSE text = NULL, quiet = FALSE,
envir = parent.frame(), encoding = getOption("encoding"))
library(knitr)
knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = FALSE text = NULL,
quiet = FALSE,
envir = parent.frame(), encoding = getOption("encoding"))
library(knitr)
knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = FALSE text = NULL,
quiet = FALSE, envir = parent.frame(),  encoding = getOption("encoding"))
library(knitr)
knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = FALSE text = NULL, quiet = FALSE, envir = parent.frame(),  encoding = getOption("encoding"))
library(knitr)
knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", tangle = FALSE, text = NULL, quiet = FALSE, envir = parent.frame(),  encoding = getOption("encoding"))
library(knitr)
knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", text = NULL, quiet = FALSE, envir = parent.frame(),  encoding = getOption("encoding"))
library(MicroStrategyR)
deployR()
library(MicroStrategyR)
deployR()
library(knitr)
x<-knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", text = NULL, quiet = FALSE, envir = parent.frame(),  encoding = getOption("encoding"))
x
rules<-(data.frame(rule=c("A", "B"), conf=(0.2, 0.3)))
rules<-(data.frame(rule=c("A", "B"), conf=c(0.2, 0.3)))
View(rules)
library(knitr)
x<-knit2html('Asocjacje_2012.Rmd', output ="Asocjacje_knit.html", text = NULL, quiet = FALSE, envir = parent.frame(),  encoding = getOption("encoding"))
rules<-(data.frame(rule=c("A", "B"), conf=c(0.2, 0.3), prod=sample(prod)))
library(MicroStrategyR)
deployR()
pp<-read_data()
frequencies.df<-assoc_frequency(pp)
trans<-as(split(pp[,PRODUKT], pp[,ID]), "transactions")
source("functions.R")
pp<-read_data()
frequencies.df<-assoc_frequency(pp)
trans<-as(split(pp[,PRODUKT], pp[,ID]), "transactions")
dwh<-odbcConnect("SADT", uid="mazurekma")
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
close(dwh)
colnames[2]
colnames<-colnames(pozycje_transakcji.dt)
s<-colnames(pozycje_transakcji.dt)
pozycje.dt<-pozycje_transakcji.dt[, list(get(colnames[2]), TRANSAKCJA_UNIKALNY_NR)]
#wyciagniecie listy identyfikatorow transakcji oraz pobranie probki
trans_id<-pozycje.dt$TRANSAKCJA_UNIKALNY_NR
#deduplikacja numerow transakcji
trans_id_dedup<-trans_id[!duplicated(trans_id)]
#wylosowanie proby transkacji
n=min(10000, nrow(trans_id_dedup))
trans_id_sample<-sample(trans_id_dedup, size=n)
#nadanie nowych numerow
trans_id.dt<-data.table(trans_id_sample, seq(1, length(trans_id_sample)))
setnames(trans_id.dt, "trans_id_sample", "TRANSAKCJA_UNIKALNY_NR")
setnames(trans_id.dt, "V2", "ID")
#selekcja pozycji transakcji
setkey(trans_id.dt, TRANSAKCJA_UNIKALNY_NR)
setkey(pozycje.dt, TRANSAKCJA_UNIKALNY_NR)
pozycje.sample.dt<-pozycje.dt[trans_id.dt]
setnames(pozycje.sample.dt, "V1", "PRODUKT")
pozycje.sample.dt<-pozycje.sample.dt[,list(ID, PRODUKT)]
pozycje.sample.d
dwh<-odbcConnect("SADT", uid="mazurekma")
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
close(dwh)
colnames<-colnames(pozycje_transakcji.dt)
pozycje.dt<-pozycje_transakcji.dt[, list(get(colnames[2]), TRANSAKCJA_UNIKALNY_NR)]
#wyciagniecie listy identyfikatorow transakcji oraz pobranie probki
trans_id<-pozycje.dt$TRANSAKCJA_UNIKALNY_NR
#deduplikacja numerow transakcji
trans_id_dedup<-trans_id[!duplicated(trans_id)]
#wylosowanie proby transkacji
n=min(10000, nrow(trans_id_dedup))
trans_id_sample<-sample(trans_id_dedup, size=n)
#nadanie nowych numerow
trans_id.dt<-data.table(trans_id_sample, seq(1, length(trans_id_sample)))
setnames(trans_id.dt, "trans_id_sample", "TRANSAKCJA_UNIKALNY_NR")
setnames(trans_id.dt, "V2", "ID")
#selekcja pozycji transakcji
setkey(trans_id.dt, TRANSAKCJA_UNIKALNY_NR)
setkey(pozycje.dt, TRANSAKCJA_UNIKALNY_NR)
pozycje.sample.dt<-pozycje.dt[trans_id.dt]
setnames(pozycje.sample.dt, "V1", "PRODUKT")
pozycje.sample.dt<-pozycje.sample.dt[,list(ID, PRODUKT)]
pozycje.sample.dt
nrow(trans_id_dedup)
pozycje_transakcji.dt
trans_id<-pozycje.dt$TRANSAKCJA_UNIKALNY_NR
trans_id_dedup<-trans_id[!duplicated(trans_id)]
trans_id_dedup
nrow(trans_id_dedup)
nrows(trans_id_dedup)
nrow(trans_id_dedup)
trans_id_dedup<-trans_id[!duplicated(trans_id)]
trans_id_dedup
n=min(10000, length(trans_id_dedup))
n=min(10000, length(trans_id_dedup))
trans_id_sample<-sample(trans_id_dedup, size=n)
#nadanie nowych numerow
trans_id.dt<-data.table(trans_id_sample, seq(1, length(trans_id_sample)))
setnames(trans_id.dt, "trans_id_sample", "TRANSAKCJA_UNIKALNY_NR")
setnames(trans_id.dt, "V2", "ID")
#selekcja pozycji transakcji
setkey(trans_id.dt, TRANSAKCJA_UNIKALNY_NR)
setkey(pozycje.dt, TRANSAKCJA_UNIKALNY_NR)
pozycje.sample.dt<-pozycje.dt[trans_id.dt]
setnames(pozycje.sample.dt, "V1", "PRODUKT")
pozycje.sample.dt<-pozycje.sample.dt[,list(ID, PRODUKT)]
pozycje.sample.dt
knit2html('AsocjacjeHTML.Rmd', output ="C:\inetpub\wwwroot\AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
library(knitr)
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="D://MicroStrategy//Web ASPx//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="D://MicroStrategy//Web ASPx//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
library(knitr)
knit2html('AsocjacjeHTML.Rmd', output ="D://MicroStrategy//Web ASPx//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="D://MicroStrategy//Web ASPx//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="D://MicroStrategy//Web ASPx//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
dwh<-odbcConnect("SADT", uid="mazurekma")
library(RODBC)
dwh<-odbcConnect("SADT", uid="mazurekma")
library(knitr)
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
rules<-c("Zakończono generację reguł asocjacyjnych")
library(knitr)
knit('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html",  encoding = getOption("encoding"))
knit('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", options=c('base64_images'), encoding = getOption("encoding"))
markdownHTMLOptions(default=TRUE)
library(knitr)
markdownHTMLOptions(default=TRUE)
markdownHTMLOptions(
markdownHTMLOptions(default=TRUE)
knit2html('AsocjacjeHTML.Rmd', output ="C:/inetpub/wwwroot/AsocjacjeReport.html", options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C/inetpub/wwwroot/AsocjacjeReport.html", options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C//inetpub//wwwroot//AsocjacjeReport.html", options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", envir = parent.frame(), options=c('base64_images'), encoding = getOption("encoding"))
# test --------------------------------------------------------------------
#load("pozycje_20120708.dat") #pozycje_201307
#pozycje<-subset(pozycje_20120708, RODZAJ_PROBY=="PROBA")
#pozycje<-pozycje[, c("TRANSAKCJA_UNIKALNY_NR", "MATERIAL_ID", "HIERARCHIA_MATERIALOW_ID")]
#probka danych
#trans_sample<-assocs_sample(pozycje, 100000)
require(knitr); knit('AsocjacjeHTML.Rmd', encoding='CP1250')
markdownToHTML('AsocjacjeHTML.Rmd')
markdownToHTML('AsocjacjeHTML.Rmd')
library(markdown)
markdownToHTML('AsocjacjeHTML.md')
markdownToHTML('AsocjacjeHTML.md', output ="C://inetpub//wwwroot//AsocjacjeReport.html")
dwh<-odbcConnect("SADT", uid="mazurekma")
#MICROSTRATEGY_BEGIN
#
#RVAR prod -input -string -vector
#
#RVAR rules -output -string -vector  #Metric Expression: RScript<_RScriptFile="C:\Users\mazurekma\Documents\RAsocjacje.R", _InputNames="prod">(prod)
if(exists("mstr.WorkingDir")) setwd(mstr.WorkingDir)  #Working Directory if executed by MicroStrategy
#
#MICROSTRATEGY_END
library(knitr)
library(markdown)
#tryCatch for Exception Handling
mstr.ErrMsg <- tryCatch({
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", envir = new.env(), options=c('base64_images'), encoding = getOption("encoding"))
knit('AsocjacjeHTML.Rmd', encoding='CP1250')
markdownToHTML('AsocjacjeHTML.md', output ="C://inetpub//wwwroot//AsocjacjeReport.html")
rules<-c("Zakończono generację reguł asocjacyjnych")
try(print("Success!"))
#If we made it here, no errors were caught
mstr.ErrMsg <- ""
#Catch block to report an error
}, error = function(err) {
#Print error message if run from console
try(print(err))
#Return error message
return(err$message)
})
#MICROSTRATEGY_BEGIN
#
#RVAR prod -input -string -vector
#
#RVAR rules -output -string -vector  #Metric Expression: RScript<_RScriptFile="C:\Users\mazurekma\Documents\RAsocjacje.R", _InputNames="prod">(prod)
if(exists("mstr.WorkingDir")) setwd(mstr.WorkingDir)  #Working Directory if executed by MicroStrategy
#
#MICROSTRATEGY_END
library(knitr)
library(markdown)
#tryCatch for Exception Handling
mstr.ErrMsg <- tryCatch({
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", envir = new.env(), options=c('base64_images'), encoding = getOption("encoding"))
knit('AsocjacjeHTML.Rmd', encoding='CP1250')
markdownToHTML('AsocjacjeHTML.md', output ="C://inetpub//wwwroot//AsocjacjeReport.html")
rules<-c("Zakończono generację reguł asocjacyjnych")
try(print("Success!"))
#If we made it here, no errors were caught
mstr.ErrMsg <- ""
#Catch block to report an error
}, error = function(err) {
#Print error message if run from console
try(print(err))
#Return error message
return(err$message)
})
#MICROSTRATEGY_BEGIN
#
#RVAR prod -input -string -vector
#
#RVAR rules -output -string -vector  #Metric Expression: RScript<_RScriptFile="C:\Users\mazurekma\Documents\RAsocjacje.R", _InputNames="prod">(prod)
if(exists("mstr.WorkingDir")) setwd(mstr.WorkingDir)  #Working Directory if executed by MicroStrategy
#
#MICROSTRATEGY_END
library(knitr)
library(markdown)
#tryCatch for Exception Handling
mstr.ErrMsg <- tryCatch({
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", envir = new.env(), options=c('base64_images'), encoding = getOption("encoding"))
knit('AsocjacjeHTML.Rmd', encoding='CP1250')
markdownToHTML('AsocjacjeHTML.md', output ="C://inetpub//wwwroot//AsocjacjeReport.html")
rules<-c("Zakończono generację reguł asocjacyjnych")
try(print("Success!"))
#If we made it here, no errors were caught
mstr.ErrMsg <- ""
#Catch block to report an error
}, error = function(err) {
#Print error message if run from console
try(print(err))
#Return error message
return(err$message)
})
dwh<-odbcConnect("SADT", uid="mazurekma", pwd="Pb95_2014")
dwh<-odbcConnect("SADT", uid="mazurekma", pwd="Pb95_2014x")
close(dwh)
dwh<-odbcConnect("SADT", uid="mazurekma", pwd="Pb95_2014x")
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
dwh<-odbcConnect("SADT", uid="sadt_microstrategy", pwd="micro$trategy")
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
pozycje_transakcji.dt
dwh<-odbcConnect("SADT", uid="sadt_microstrategy", pwd="micro$trategyX")
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
pozycje_transakcji.dt
dwh<-odbcConnect("SADT", uid="sadt_microstrategy", pwd="micro$trategyX")
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
View(pozycje_transakcji.dt)
dwh<-odbcConnect("SADT64", uid="sadt_microstrategy")
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
dwh<-odbcConnect("SADT6x4", uid="sadt_microstrategy")
dwh<-odbcConnect("SADT64", uid="sadt_microstrategy")
pozycje_transakcji.dt<- data.table(sqlQuery(dwh, "  select distinct * from REP_ASOCJACJE_TRANSKACJE  "))
```
#MICROSTRATEGY_BEGIN
#
#RVAR prod -input -string -vector
#
#RVAR rules -output -string -vector  #Metric Expression: RScript<_RScriptFile="C:\Users\mazurekma\Documents\RAsocjacje.R", _InputNames="prod">(prod)
if(exists("mstr.WorkingDir")) setwd(mstr.WorkingDir)  #Working Directory if executed by MicroStrategy
#
#MICROSTRATEGY_END
library(knitr)
library(markdown)
#tryCatch for Exception Handling
mstr.ErrMsg <- tryCatch({
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", envir = new.env(), options=c('base64_images'), encoding = getOption("encoding"))
#knit('AsocjacjeHTML.Rmd', encoding='CP1250')
#markdownToHTML('AsocjacjeHTML.md', output ="C://inetpub//wwwroot//AsocjacjeReport.html")
rules<-c("Zakończono generację reguł asocjacyjnych")
try(print("Success!"))
#If we made it here, no errors were caught
mstr.ErrMsg <- ""
#Catch block to report an error
}, error = function(err) {
#Print error message if run from console
try(print(err))
#Return error message
return(err$message)
})
mstr.WorkingDir
if(exists("mstr.WorkingDir")) setwd(mstr.WorkingDir)  #Working Directory if executed by MicroStrategy
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html")
knit('AsocjacjeHTML.Rmd', output ='C://inetpub//wwwroot//AsocjacjeReport.md', encoding='CP1250')
markdownToHTML('C://inetpub//wwwroot//AsocjacjeReport.md', output ='C://inetpub//wwwroot//AsocjacjeReport.html')
#MICROSTRATEGY_BEGIN
#
#RVAR prod -input -string -vector
#
#RVAR rules -output -string -vector  #Metric Expression: RScript<_RScriptFile="C:\Users\mazurekma\Documents\RAsocjacje.R", _InputNames="prod">(prod)
#if(exists("mstr.WorkingDir")) setwd(mstr.WorkingDir)  #Working Directory if executed by MicroStrategy
#
#MICROSTRATEGY_END
library(knitr)
library(markdown)
#tryCatch for Exception Handling
mstr.ErrMsg <- tryCatch({
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
#knit('AsocjacjeHTML.Rmd', output ='C://inetpub//wwwroot//AsocjacjeReport.md', encoding='CP1250')
#markdownToHTML('C://inetpub//wwwroot//AsocjacjeReport.md', output ='C://inetpub//wwwroot//AsocjacjeReport.html')
rules<-c("Zakończono generację reguł asocjacyjnych")
try(print("Success!"))
#If we made it here, no errors were caught
mstr.ErrMsg <- ""
#Catch block to report an error
}, error = function(err) {
#Print error message if run from console
try(print(err))
#Return error message
return(err$message)
})
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", base.dir='C://inetpub//wwwroot//', envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html",  envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html",  cache=FALSE, envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html",   envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
opts_knit$set(base.dir = '"C://inetpub//wwwroot//')
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html",   envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
opts_knit$set(base.dir = '"C://inetpub//wwwroot//')
knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html",   envir = globalenv(), options=c('base64_images'), encoding = getOption("encoding"))
file.copy(list.dirs("/figures", full.names = TRUE), "C://inetpub//wwwroot//figures", recursive=TRUE)
file.copy(list.dirs("//figure", full.names = TRUE), "C://inetpub//wwwroot//figure", recursive=TRUE)
file.copy(list.dirs("//figure//", full.names = TRUE), "C://inetpub//wwwroot//figure", recursive=TRUE)
file.copy(list.dirs("figure", full.names = TRUE), "C://inetpub//wwwroot//figure", recursive=TRUE)
file.copy(list.dirs("figure", full.names = TRUE), "C://inetpub//wwwroot//figure")
list.dir("figure", full.names = TRUE)
list.files("figure", full.names = TRUE)
file.copy(list.files("figure"), "C://inetpub//wwwroot//figure")
file.copy(list.files("figure"), "C://inetpub//wwwroot//figure/")
file.copy(list.files("figure"), to="C://inetpub//wwwroot//figure/")
file.copy(list.files("figure"), to="C://inetpub//wwwroot//figure//")
list.dir("figure")
dir("figure")
dir("//figure")
dir("//figure")
setwd("C:/RDir")
#MICROSTRATEGY_BEGIN
#
#RVAR prod -input -string -vector
#
#RVAR rules -output -string -vector  #Metric Expression: RScript<_RScriptFile="C:\RDir\RAsocjacje.R", _InputNames="prod">(prod)
#if(exists("mstr.WorkingDir")) setwd(mstr.WorkingDir)  #Working Directory if executed by MicroStrategy
#
#MICROSTRATEGY_END
setwd("C://RDir")
library(knitr)
library(markdown)
#tryCatch for Exception Handling
mstr.ErrMsg <- tryCatch({
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="AsocjacjeReport.html",   envir = globalenv(), options=c('base64_images'), encoding = encoding='CP1250')
#knit('AsocjacjeHTML.Rmd', output ='C://inetpub//wwwroot//AsocjacjeReport.md', encoding='CP1250')
#markdownToHTML('C://inetpub//wwwroot//AsocjacjeReport.md', output ='C://inetpub//wwwroot//AsocjacjeReport.html')
rules<-c("Zakończono generację reguł asocjacyjnych")
try(print("Success!"))
#If we made it here, no errors were caught
mstr.ErrMsg <- ""
#Catch block to report an error
}, error = function(err) {
#Print error message if run from console
try(print(err))
#Return error message
return(err$message)
})
#MICROSTRATEGY_BEGIN
#
#RVAR prod -input -string -vector
#
#RVAR rules -output -string -vector  #Metric Expression: RScript<_RScriptFile="C:\RDir\RAsocjacje.R", _InputNames="prod">(prod)
#if(exists("mstr.WorkingDir")) setwd(mstr.WorkingDir)  #Working Directory if executed by MicroStrategy
#
#MICROSTRATEGY_END
setwd("C://RDir")
library(knitr)
library(markdown)
#tryCatch for Exception Handling
mstr.ErrMsg <- tryCatch({
#knit2html('AsocjacjeHTML.Rmd', output ="C://inetpub//wwwroot//AsocjacjeReport.html", text = NULL, quiet = FALSE, envir = new.env(),  encoding = getOption("encoding"))
knit2html('AsocjacjeHTML.Rmd', output ="AsocjacjeReport.html",   envir = globalenv(), options=c('base64_images'), encoding = encoding='CP1250'))
#knit('AsocjacjeHTML.Rmd', output ='C://inetpub//wwwroot//AsocjacjeReport.md', encoding='CP1250')
#markdownToHTML('C://inetpub//wwwroot//AsocjacjeReport.md', output ='C://inetpub//wwwroot//AsocjacjeReport.html')
rules<-c("Zakończono generację reguł asocjacyjnych")
try(print("Success!"))
#If we made it here, no errors were caught
mstr.ErrMsg <- ""
#Catch block to report an error
}, error = function(err) {
#Print error message if run from console
try(print(err))
#Return error message
return(err$message)
})
